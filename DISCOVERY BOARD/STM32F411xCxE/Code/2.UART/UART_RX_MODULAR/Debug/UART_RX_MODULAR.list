
UART_RX_MODULAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000364  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004fc  08000504  00001504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004fc  080004fc  00001504  2**0
                  CONTENTS
  4 .ARM          00000000  080004fc  080004fc  00001504  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004fc  08000504  00001504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004fc  080004fc  000014fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000500  08000500  00001500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000504  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000504  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007a5  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000280  00000000  00000000  00001cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00001f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000066  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ea14  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f47  00000000  00000000  00010a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053904  00000000  00000000  000119b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000652bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  00065300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00065458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004e4 	.word	0x080004e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080004e4 	.word	0x080004e4

080001d8 <main>:
#define PIN14				(1<<14)
#define PIN15				(1<<15)

char key;

int main (void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= GPIODEN;
 80001dc:	4b41      	ldr	r3, [pc, #260]	@ (80002e4 <main+0x10c>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e0:	4a40      	ldr	r2, [pc, #256]	@ (80002e4 <main+0x10c>)
 80001e2:	f043 0308 	orr.w	r3, r3, #8
 80001e6:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOD->MODER  |= (3<<24);  //set bit 10 to 1
 80001e8:	4b3f      	ldr	r3, [pc, #252]	@ (80002e8 <main+0x110>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a3e      	ldr	r2, [pc, #248]	@ (80002e8 <main+0x110>)
 80001ee:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER  &= ~(1<<25);  //set bit 11 to 0
 80001f4:	4b3c      	ldr	r3, [pc, #240]	@ (80002e8 <main+0x110>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a3b      	ldr	r2, [pc, #236]	@ (80002e8 <main+0x110>)
 80001fa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80001fe:	6013      	str	r3, [r2, #0]

	GPIOD->MODER  |= (3<<26);  //set bit 10 to 1
 8000200:	4b39      	ldr	r3, [pc, #228]	@ (80002e8 <main+0x110>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a38      	ldr	r2, [pc, #224]	@ (80002e8 <main+0x110>)
 8000206:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 800020a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER  &= ~(1<<27);  //set bit 11 to 0
 800020c:	4b36      	ldr	r3, [pc, #216]	@ (80002e8 <main+0x110>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a35      	ldr	r2, [pc, #212]	@ (80002e8 <main+0x110>)
 8000212:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000216:	6013      	str	r3, [r2, #0]

	GPIOD->MODER  |= (3<<28);  //set bit 10 to 1
 8000218:	4b33      	ldr	r3, [pc, #204]	@ (80002e8 <main+0x110>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a32      	ldr	r2, [pc, #200]	@ (80002e8 <main+0x110>)
 800021e:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000222:	6013      	str	r3, [r2, #0]
	GPIOD->MODER  &= ~(1<<29);  //set bit 11 to 0
 8000224:	4b30      	ldr	r3, [pc, #192]	@ (80002e8 <main+0x110>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a2f      	ldr	r2, [pc, #188]	@ (80002e8 <main+0x110>)
 800022a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800022e:	6013      	str	r3, [r2, #0]

	GPIOD->MODER  |= (3<<30);  //set bit 10 to 1
 8000230:	4b2d      	ldr	r3, [pc, #180]	@ (80002e8 <main+0x110>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a2c      	ldr	r2, [pc, #176]	@ (80002e8 <main+0x110>)
 8000236:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800023a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER  &= ~(1<<31);  //set bit 11 to 0
 800023c:	4b2a      	ldr	r3, [pc, #168]	@ (80002e8 <main+0x110>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a29      	ldr	r2, [pc, #164]	@ (80002e8 <main+0x110>)
 8000242:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000246:	6013      	str	r3, [r2, #0]



	uart2_rxtx_init();
 8000248:	f000 f852 	bl	80002f0 <uart2_rxtx_init>

	while(1){
		  key = uart2_read();
 800024c:	f000 f8c2 	bl	80003d4 <uart2_read>
 8000250:	4603      	mov	r3, r0
 8000252:	461a      	mov	r2, r3
 8000254:	4b25      	ldr	r3, [pc, #148]	@ (80002ec <main+0x114>)
 8000256:	701a      	strb	r2, [r3, #0]

		if (key == '1'){
 8000258:	4b24      	ldr	r3, [pc, #144]	@ (80002ec <main+0x114>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b31      	cmp	r3, #49	@ 0x31
 800025e:	d106      	bne.n	800026e <main+0x96>
			GPIOD->ODR |= PIN12;
 8000260:	4b21      	ldr	r3, [pc, #132]	@ (80002e8 <main+0x110>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a20      	ldr	r2, [pc, #128]	@ (80002e8 <main+0x110>)
 8000266:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800026a:	6153      	str	r3, [r2, #20]
 800026c:	e7ee      	b.n	800024c <main+0x74>
		}
		else if(key == '2'){
 800026e:	4b1f      	ldr	r3, [pc, #124]	@ (80002ec <main+0x114>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b32      	cmp	r3, #50	@ 0x32
 8000274:	d106      	bne.n	8000284 <main+0xac>
			GPIOD->ODR |= PIN13;
 8000276:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <main+0x110>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a1b      	ldr	r2, [pc, #108]	@ (80002e8 <main+0x110>)
 800027c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000280:	6153      	str	r3, [r2, #20]
 8000282:	e7e3      	b.n	800024c <main+0x74>
		}
		else if(key == '3'){
 8000284:	4b19      	ldr	r3, [pc, #100]	@ (80002ec <main+0x114>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b33      	cmp	r3, #51	@ 0x33
 800028a:	d106      	bne.n	800029a <main+0xc2>
			GPIOD->ODR |= PIN14;
 800028c:	4b16      	ldr	r3, [pc, #88]	@ (80002e8 <main+0x110>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a15      	ldr	r2, [pc, #84]	@ (80002e8 <main+0x110>)
 8000292:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000296:	6153      	str	r3, [r2, #20]
 8000298:	e7d8      	b.n	800024c <main+0x74>
		}
		else if(key == '4'){
 800029a:	4b14      	ldr	r3, [pc, #80]	@ (80002ec <main+0x114>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b34      	cmp	r3, #52	@ 0x34
 80002a0:	d106      	bne.n	80002b0 <main+0xd8>
			GPIOD->ODR |= PIN15;
 80002a2:	4b11      	ldr	r3, [pc, #68]	@ (80002e8 <main+0x110>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a10      	ldr	r2, [pc, #64]	@ (80002e8 <main+0x110>)
 80002a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002ac:	6153      	str	r3, [r2, #20]
 80002ae:	e7cd      	b.n	800024c <main+0x74>
		}
		else{
			GPIOD->ODR &=~ PIN12;
 80002b0:	4b0d      	ldr	r3, [pc, #52]	@ (80002e8 <main+0x110>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a0c      	ldr	r2, [pc, #48]	@ (80002e8 <main+0x110>)
 80002b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002ba:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &=~ PIN13;
 80002bc:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <main+0x110>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a09      	ldr	r2, [pc, #36]	@ (80002e8 <main+0x110>)
 80002c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002c6:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &=~ PIN14;
 80002c8:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <main+0x110>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a06      	ldr	r2, [pc, #24]	@ (80002e8 <main+0x110>)
 80002ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80002d2:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &=~ PIN15;
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <main+0x110>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a03      	ldr	r2, [pc, #12]	@ (80002e8 <main+0x110>)
 80002da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002de:	6153      	str	r3, [r2, #20]
		  key = uart2_read();
 80002e0:	e7b4      	b.n	800024c <main+0x74>
 80002e2:	bf00      	nop
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40020c00 	.word	0x40020c00
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <uart2_rxtx_init>:

int __io_putchar(int ch){
	uart2_write(ch);
	return ch;
}
void uart2_rxtx_init(void){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	//configure UART transmission pin
	//enable clock access to gpio a
	//set pa2 mode to alternate function mode
	//set pa2 alternate function type to UART tx (AF07)

	RCC->AHB1ENR |= GPIOAEN;
 80002f4:	4b33      	ldr	r3, [pc, #204]	@ (80003c4 <uart2_rxtx_init+0xd4>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f8:	4a32      	ldr	r2, [pc, #200]	@ (80003c4 <uart2_rxtx_init+0xd4>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER  &=~ (1U<<4);
 8000300:	4b31      	ldr	r3, [pc, #196]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a30      	ldr	r2, [pc, #192]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000306:	f023 0310 	bic.w	r3, r3, #16
 800030a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  (1U<<5);
 800030c:	4b2e      	ldr	r3, [pc, #184]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a2d      	ldr	r2, [pc, #180]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000312:	f043 0320 	orr.w	r3, r3, #32
 8000316:	6013      	str	r3, [r2, #0]

	GPIOA->MODER  &=~ (1U<<6);
 8000318:	4b2b      	ldr	r3, [pc, #172]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a2a      	ldr	r2, [pc, #168]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800031e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000322:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  (1U<<7);
 8000324:	4b28      	ldr	r3, [pc, #160]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a27      	ldr	r2, [pc, #156]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800032a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800032e:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |=  (1U<<8);
 8000330:	4b25      	ldr	r3, [pc, #148]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000332:	6a1b      	ldr	r3, [r3, #32]
 8000334:	4a24      	ldr	r2, [pc, #144]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800033a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<9);
 800033c:	4b22      	ldr	r3, [pc, #136]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800033e:	6a1b      	ldr	r3, [r3, #32]
 8000340:	4a21      	ldr	r2, [pc, #132]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000342:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000346:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<10);
 8000348:	4b1f      	ldr	r3, [pc, #124]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800034a:	6a1b      	ldr	r3, [r3, #32]
 800034c:	4a1e      	ldr	r2, [pc, #120]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800034e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000352:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<11);
 8000354:	4b1c      	ldr	r3, [pc, #112]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000356:	6a1b      	ldr	r3, [r3, #32]
 8000358:	4a1b      	ldr	r2, [pc, #108]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800035a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800035e:	6213      	str	r3, [r2, #32]

	GPIOA->AFR[0] |=  (1U<<12);
 8000360:	4b19      	ldr	r3, [pc, #100]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000362:	6a1b      	ldr	r3, [r3, #32]
 8000364:	4a18      	ldr	r2, [pc, #96]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000366:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800036a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<13);
 800036c:	4b16      	ldr	r3, [pc, #88]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800036e:	6a1b      	ldr	r3, [r3, #32]
 8000370:	4a15      	ldr	r2, [pc, #84]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000372:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000376:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<14);
 8000378:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800037a:	6a1b      	ldr	r3, [r3, #32]
 800037c:	4a12      	ldr	r2, [pc, #72]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800037e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000382:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<15);
 8000384:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 8000386:	6a1b      	ldr	r3, [r3, #32]
 8000388:	4a0f      	ldr	r2, [pc, #60]	@ (80003c8 <uart2_rxtx_init+0xd8>)
 800038a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800038e:	6213      	str	r3, [r2, #32]
	//configure UART module
	//enable clock access to uart1
	//configure baudrate
	//configure the transfer direction
	//enable UART module
	RCC->APB1ENR |= UART2EN;
 8000390:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <uart2_rxtx_init+0xd4>)
 8000392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000394:	4a0b      	ldr	r2, [pc, #44]	@ (80003c4 <uart2_rxtx_init+0xd4>)
 8000396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

	uart_set_baudrate( USART2, APB1_CLK, UART_BAUDRATE);
 800039c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003a0:	490a      	ldr	r1, [pc, #40]	@ (80003cc <uart2_rxtx_init+0xdc>)
 80003a2:	480b      	ldr	r0, [pc, #44]	@ (80003d0 <uart2_rxtx_init+0xe0>)
 80003a4:	f000 f82a 	bl	80003fc <uart_set_baudrate>
	USART2 ->CR1 |= (CR1_TE | CR1_RE);
 80003a8:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <uart2_rxtx_init+0xe0>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a08      	ldr	r2, [pc, #32]	@ (80003d0 <uart2_rxtx_init+0xe0>)
 80003ae:	f043 030c 	orr.w	r3, r3, #12
 80003b2:	60d3      	str	r3, [r2, #12]
	USART2 ->CR1 |= CR1_UE;
 80003b4:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <uart2_rxtx_init+0xe0>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4a05      	ldr	r2, [pc, #20]	@ (80003d0 <uart2_rxtx_init+0xe0>)
 80003ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003be:	60d3      	str	r3, [r2, #12]
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40023800 	.word	0x40023800
 80003c8:	40020000 	.word	0x40020000
 80003cc:	00f42400 	.word	0x00f42400
 80003d0:	40004400 	.word	0x40004400

080003d4 <uart2_read>:
	USART2 ->CR1 |= CR1_TE;
	USART2 ->CR1 |= CR1_UE;
}

char uart2_read(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	while(!(USART2-> SR & SR_RXNE)){}
 80003d8:	bf00      	nop
 80003da:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <uart2_read+0x24>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0320 	and.w	r3, r3, #32
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d0f9      	beq.n	80003da <uart2_read+0x6>
	return USART2 -> DR;
 80003e6:	4b04      	ldr	r3, [pc, #16]	@ (80003f8 <uart2_read+0x24>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	b2db      	uxtb	r3, r3
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40004400 	.word	0x40004400

080003fc <uart_set_baudrate>:
	while(!(USART2-> SR & SR_TXE)){}
	USART2 -> DR =( ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	USARTx-> BRR = compute_uart_bd( PeriphClk, BaudRate);
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	68b8      	ldr	r0, [r7, #8]
 800040c:	f000 f808 	bl	8000420 <compute_uart_bd>
 8000410:	4603      	mov	r3, r0
 8000412:	461a      	mov	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	609a      	str	r2, [r3, #8]
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	085a      	lsrs	r2, r3, #1
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	441a      	add	r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	fbb2 f3f3 	udiv	r3, r2, r3
 8000438:	b29b      	uxth	r3, r3
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
	...

08000448 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000448:	480d      	ldr	r0, [pc, #52]	@ (8000480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800044c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480c      	ldr	r0, [pc, #48]	@ (8000484 <LoopForever+0x6>)
  ldr r1, =_edata
 8000452:	490d      	ldr	r1, [pc, #52]	@ (8000488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000454:	4a0d      	ldr	r2, [pc, #52]	@ (800048c <LoopForever+0xe>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0a      	ldr	r2, [pc, #40]	@ (8000490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000468:	4c0a      	ldr	r4, [pc, #40]	@ (8000494 <LoopForever+0x16>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000476:	f000 f811 	bl	800049c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047a:	f7ff fead 	bl	80001d8 <main>

0800047e <LoopForever>:

LoopForever:
  b LoopForever
 800047e:	e7fe      	b.n	800047e <LoopForever>
  ldr   r0, =_estack
 8000480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800048c:	08000504 	.word	0x08000504
  ldr r2, =_sbss
 8000490:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000494:	20000020 	.word	0x20000020

08000498 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC_IRQHandler>
	...

0800049c <__libc_init_array>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	4d0d      	ldr	r5, [pc, #52]	@ (80004d4 <__libc_init_array+0x38>)
 80004a0:	4c0d      	ldr	r4, [pc, #52]	@ (80004d8 <__libc_init_array+0x3c>)
 80004a2:	1b64      	subs	r4, r4, r5
 80004a4:	10a4      	asrs	r4, r4, #2
 80004a6:	2600      	movs	r6, #0
 80004a8:	42a6      	cmp	r6, r4
 80004aa:	d109      	bne.n	80004c0 <__libc_init_array+0x24>
 80004ac:	4d0b      	ldr	r5, [pc, #44]	@ (80004dc <__libc_init_array+0x40>)
 80004ae:	4c0c      	ldr	r4, [pc, #48]	@ (80004e0 <__libc_init_array+0x44>)
 80004b0:	f000 f818 	bl	80004e4 <_init>
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	10a4      	asrs	r4, r4, #2
 80004b8:	2600      	movs	r6, #0
 80004ba:	42a6      	cmp	r6, r4
 80004bc:	d105      	bne.n	80004ca <__libc_init_array+0x2e>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c4:	4798      	blx	r3
 80004c6:	3601      	adds	r6, #1
 80004c8:	e7ee      	b.n	80004a8 <__libc_init_array+0xc>
 80004ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ce:	4798      	blx	r3
 80004d0:	3601      	adds	r6, #1
 80004d2:	e7f2      	b.n	80004ba <__libc_init_array+0x1e>
 80004d4:	080004fc 	.word	0x080004fc
 80004d8:	080004fc 	.word	0x080004fc
 80004dc:	080004fc 	.word	0x080004fc
 80004e0:	08000500 	.word	0x08000500

080004e4 <_init>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	bf00      	nop
 80004e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ea:	bc08      	pop	{r3}
 80004ec:	469e      	mov	lr, r3
 80004ee:	4770      	bx	lr

080004f0 <_fini>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr
