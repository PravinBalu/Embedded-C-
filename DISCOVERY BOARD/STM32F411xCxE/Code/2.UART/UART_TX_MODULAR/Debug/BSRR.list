
BSRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f0  080003f8  000013f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f0  080003f0  000013f8  2**0
                  CONTENTS
  4 .ARM          00000000  080003f0  080003f0  000013f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f0  080003f8  000013f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f0  080003f0  000013f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003f4  080003f4  000013f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003f8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003f8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003e1  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000102  00000000  00000000  00001809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc78  00000000  00000000  00001985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000693  00000000  00000000  0000f5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fdb3  00000000  00000000  0000fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005fa43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0005fa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0005fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003d8 	.word	0x080003d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003d8 	.word	0x080003d8

080001d8 <main>:
#define PIN12				(1<<12)
#define PIN13				(1<<13)
#define PIN14				(1<<14)
#define PIN15				(1<<15)

int main (void){
 80001d8:	b480      	push	{r7}
 80001da:	b089      	sub	sp, #36	@ 0x24
 80001dc:	af00      	add	r7, sp, #0
	//enable clock
	//set pd12 as output pin
	RCC->AHB1ENR |= GPIODEN;
 80001de:	4b53      	ldr	r3, [pc, #332]	@ (800032c <main+0x154>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e2:	4a52      	ldr	r2, [pc, #328]	@ (800032c <main+0x154>)
 80001e4:	f043 0308 	orr.w	r3, r3, #8
 80001e8:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOD->MODER  |= (3<<24);  //set bit 10 to 1
 80001ea:	4b51      	ldr	r3, [pc, #324]	@ (8000330 <main+0x158>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a50      	ldr	r2, [pc, #320]	@ (8000330 <main+0x158>)
 80001f0:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 80001f4:	6013      	str	r3, [r2, #0]
	GPIOD->MODER  &= ~(1<<25);  //set bit 11 to 0
 80001f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000330 <main+0x158>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000330 <main+0x158>)
 80001fc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000200:	6013      	str	r3, [r2, #0]

	GPIOD->MODER  |= (3<<26);  //set bit 10 to 1
 8000202:	4b4b      	ldr	r3, [pc, #300]	@ (8000330 <main+0x158>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a4a      	ldr	r2, [pc, #296]	@ (8000330 <main+0x158>)
 8000208:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 800020c:	6013      	str	r3, [r2, #0]
	GPIOD->MODER  &= ~(1<<27);  //set bit 11 to 0
 800020e:	4b48      	ldr	r3, [pc, #288]	@ (8000330 <main+0x158>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a47      	ldr	r2, [pc, #284]	@ (8000330 <main+0x158>)
 8000214:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000218:	6013      	str	r3, [r2, #0]

	GPIOD->MODER  |= (3<<28);  //set bit 10 to 1
 800021a:	4b45      	ldr	r3, [pc, #276]	@ (8000330 <main+0x158>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a44      	ldr	r2, [pc, #272]	@ (8000330 <main+0x158>)
 8000220:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000224:	6013      	str	r3, [r2, #0]
	GPIOD->MODER  &= ~(1<<29);  //set bit 11 to 0
 8000226:	4b42      	ldr	r3, [pc, #264]	@ (8000330 <main+0x158>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a41      	ldr	r2, [pc, #260]	@ (8000330 <main+0x158>)
 800022c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000230:	6013      	str	r3, [r2, #0]

	GPIOD->MODER  |= (3<<30);  //set bit 10 to 1
 8000232:	4b3f      	ldr	r3, [pc, #252]	@ (8000330 <main+0x158>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a3e      	ldr	r2, [pc, #248]	@ (8000330 <main+0x158>)
 8000238:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800023c:	6013      	str	r3, [r2, #0]
	GPIOD->MODER  &= ~(1<<31);  //set bit 11 to 0
 800023e:	4b3c      	ldr	r3, [pc, #240]	@ (8000330 <main+0x158>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a3b      	ldr	r2, [pc, #236]	@ (8000330 <main+0x158>)
 8000244:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000248:	6013      	str	r3, [r2, #0]

	while(1){

		GPIOD->BSRR = PIN12;
 800024a:	4b39      	ldr	r3, [pc, #228]	@ (8000330 <main+0x158>)
 800024c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000250:	619a      	str	r2, [r3, #24]
		for( int i=0;i<100000;i++) {}
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
 8000256:	e002      	b.n	800025e <main+0x86>
 8000258:	69fb      	ldr	r3, [r7, #28]
 800025a:	3301      	adds	r3, #1
 800025c:	61fb      	str	r3, [r7, #28]
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	4a34      	ldr	r2, [pc, #208]	@ (8000334 <main+0x15c>)
 8000262:	4293      	cmp	r3, r2
 8000264:	ddf8      	ble.n	8000258 <main+0x80>
		GPIOD->BSRR = PIN13;
 8000266:	4b32      	ldr	r3, [pc, #200]	@ (8000330 <main+0x158>)
 8000268:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800026c:	619a      	str	r2, [r3, #24]
		for( int i=0;i<100000;i++) {}
 800026e:	2300      	movs	r3, #0
 8000270:	61bb      	str	r3, [r7, #24]
 8000272:	e002      	b.n	800027a <main+0xa2>
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	3301      	adds	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
 800027a:	69bb      	ldr	r3, [r7, #24]
 800027c:	4a2d      	ldr	r2, [pc, #180]	@ (8000334 <main+0x15c>)
 800027e:	4293      	cmp	r3, r2
 8000280:	ddf8      	ble.n	8000274 <main+0x9c>
		GPIOD->BSRR = PIN14;
 8000282:	4b2b      	ldr	r3, [pc, #172]	@ (8000330 <main+0x158>)
 8000284:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000288:	619a      	str	r2, [r3, #24]
		for( int i=0;i<100000;i++) {}
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
 800028e:	e002      	b.n	8000296 <main+0xbe>
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	3301      	adds	r3, #1
 8000294:	617b      	str	r3, [r7, #20]
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	4a26      	ldr	r2, [pc, #152]	@ (8000334 <main+0x15c>)
 800029a:	4293      	cmp	r3, r2
 800029c:	ddf8      	ble.n	8000290 <main+0xb8>
		GPIOD->BSRR = PIN15;
 800029e:	4b24      	ldr	r3, [pc, #144]	@ (8000330 <main+0x158>)
 80002a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80002a4:	619a      	str	r2, [r3, #24]
		for( int i=0;i<1000000;i++) {}
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
 80002aa:	e002      	b.n	80002b2 <main+0xda>
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	3301      	adds	r3, #1
 80002b0:	613b      	str	r3, [r7, #16]
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	4a20      	ldr	r2, [pc, #128]	@ (8000338 <main+0x160>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	ddf8      	ble.n	80002ac <main+0xd4>

		GPIOD->BSRR = (1<<28);
 80002ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000330 <main+0x158>)
 80002bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80002c0:	619a      	str	r2, [r3, #24]
		for( int i=0;i<100000;i++) {}
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	e002      	b.n	80002ce <main+0xf6>
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	4a18      	ldr	r2, [pc, #96]	@ (8000334 <main+0x15c>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	ddf8      	ble.n	80002c8 <main+0xf0>
		GPIOD->BSRR = (1<<29);
 80002d6:	4b16      	ldr	r3, [pc, #88]	@ (8000330 <main+0x158>)
 80002d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80002dc:	619a      	str	r2, [r3, #24]
		for( int i=0;i<100000;i++) {}
 80002de:	2300      	movs	r3, #0
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	e002      	b.n	80002ea <main+0x112>
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	3301      	adds	r3, #1
 80002e8:	60bb      	str	r3, [r7, #8]
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	4a11      	ldr	r2, [pc, #68]	@ (8000334 <main+0x15c>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	ddf8      	ble.n	80002e4 <main+0x10c>
		GPIOD->BSRR = (1<<30);
 80002f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <main+0x158>)
 80002f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002f8:	619a      	str	r2, [r3, #24]
		for( int i=0;i<100000;i++) {}
 80002fa:	2300      	movs	r3, #0
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	e002      	b.n	8000306 <main+0x12e>
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	3301      	adds	r3, #1
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a0a      	ldr	r2, [pc, #40]	@ (8000334 <main+0x15c>)
 800030a:	4293      	cmp	r3, r2
 800030c:	ddf8      	ble.n	8000300 <main+0x128>
		GPIOD->BSRR = (1<<31);
 800030e:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <main+0x158>)
 8000310:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000314:	619a      	str	r2, [r3, #24]
		for( int i=0;i<100000;i++) {}
 8000316:	2300      	movs	r3, #0
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	e002      	b.n	8000322 <main+0x14a>
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	3301      	adds	r3, #1
 8000320:	603b      	str	r3, [r7, #0]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	4a03      	ldr	r2, [pc, #12]	@ (8000334 <main+0x15c>)
 8000326:	4293      	cmp	r3, r2
 8000328:	ddf8      	ble.n	800031c <main+0x144>
		GPIOD->BSRR = PIN12;
 800032a:	e78e      	b.n	800024a <main+0x72>
 800032c:	40023800 	.word	0x40023800
 8000330:	40020c00 	.word	0x40020c00
 8000334:	0001869f 	.word	0x0001869f
 8000338:	000f423f 	.word	0x000f423f

0800033c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800033c:	480d      	ldr	r0, [pc, #52]	@ (8000374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000340:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	@ (8000378 <LoopForever+0x6>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	@ (800037c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	@ (8000380 <LoopForever+0xe>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	@ (8000384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	@ (8000388 <LoopForever+0x16>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036a:	f000 f811 	bl	8000390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036e:	f7ff ff33 	bl	80001d8 <main>

08000372 <LoopForever>:

LoopForever:
  b LoopForever
 8000372:	e7fe      	b.n	8000372 <LoopForever>
  ldr   r0, =_estack
 8000374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000380:	080003f8 	.word	0x080003f8
  ldr r2, =_sbss
 8000384:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000388:	2000001c 	.word	0x2000001c

0800038c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC_IRQHandler>
	...

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	4d0d      	ldr	r5, [pc, #52]	@ (80003c8 <__libc_init_array+0x38>)
 8000394:	4c0d      	ldr	r4, [pc, #52]	@ (80003cc <__libc_init_array+0x3c>)
 8000396:	1b64      	subs	r4, r4, r5
 8000398:	10a4      	asrs	r4, r4, #2
 800039a:	2600      	movs	r6, #0
 800039c:	42a6      	cmp	r6, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	4d0b      	ldr	r5, [pc, #44]	@ (80003d0 <__libc_init_array+0x40>)
 80003a2:	4c0c      	ldr	r4, [pc, #48]	@ (80003d4 <__libc_init_array+0x44>)
 80003a4:	f000 f818 	bl	80003d8 <_init>
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	10a4      	asrs	r4, r4, #2
 80003ac:	2600      	movs	r6, #0
 80003ae:	42a6      	cmp	r6, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b8:	4798      	blx	r3
 80003ba:	3601      	adds	r6, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c2:	4798      	blx	r3
 80003c4:	3601      	adds	r6, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	080003f0 	.word	0x080003f0
 80003cc:	080003f0 	.word	0x080003f0
 80003d0:	080003f0 	.word	0x080003f0
 80003d4:	080003f4 	.word	0x080003f4

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
